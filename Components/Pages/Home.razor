@page "/"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<PageTitle>Home</PageTitle>
<div id="stl-viewer-toolbar-overlay" class="toolbar-container">
    <div id="stl-viewer-toolbar-main" class="toolbar-main">
        <div class="toolbar-section" data-section-label="View Orientations">
            <div class="toolbar-section-header">View Orientations</div>
            <div class="toolbar-button-container">
                <button class="toolbar-button" data-button-id="btnViewFront" title="Front"></button>
                <button class="toolbar-button" data-button-id="btnViewBack" title="Back"></button>
                <button class="toolbar-button" data-button-id="btnViewTop" title="Top"></button>
                <button class="toolbar-button" data-button-id="btnViewBottom" title="Bottom"></button>
                <button class="toolbar-button" data-button-id="btnViewLeft" title="Left"></button>
                <button class="toolbar-button" data-button-id="btnViewRight" title="Right"></button>
                <div class="toolbar-separator" data-separator-id="sepViewOrient"></div>
            </div>
        </div>

        <div class="toolbar-section" data-section-label="Reset">
            <div class="toolbar-section-header">Reset</div>
            <div class="toolbar-button-container">
                <button class="toolbar-button" data-button-id="btnResetSize" title="Reset Size"></button>
                <button class="toolbar-button" data-button-id="btnResetPos" title="Reset Position"></button>
                <div class="toolbar-separator" data-separator-id="sepReset"></div>
            </div>
        </div>

        <div class="toolbar-section" data-section-label="Border">
            <div class="toolbar-section-header">Border</div>
            <div class="toolbar-button-container">
                <button class="toolbar-button" data-button-id="btnToggleBorder" title="Toggle Border"></button>
                <button class="toolbar-button" data-button-id="btnBorderColor" title="Change Border Color"></button>
                <div class="toolbar-separator" data-separator-id="sepBorder"></div>
            </div>
        </div>

        <div class="toolbar-section" data-section-label="Background">
            <div class="toolbar-section-header">Background</div>
            <div class="toolbar-button-container">
                <button class="toolbar-button" data-button-id="btnBgColor" title="Change Background"></button>
            </div>
        </div>
        <div class="toolbar-section" data-section-label="Resize">
            <div class="toolbar-section-header">Resize</div>
            <div class="toolbar-button-container">
                <button class="toolbar-button" data-button-id="btnResizeMode" title="Resize"></button>
            </div>
        </div>
        <div id="global-color-picker-popup" class="color-picker-container" style="display: none; z-index: 1000;">
            <div class="color-picker-swatch-container">
                <div class="color-picker-swatch"></div>
                <div class="color-picker-swatch"></div>
                <div class="color-picker-swatch"></div>
            </div>
            <div class="color-picker-custom-container">
                <span class="color-picker-label">Custom:</span>
                <input type="color" class="color-picker-input">
                <button class="color-picker-apply">Apply</button>
            </div>
        </div>

    </div>
</div>
<div id="three-container" class="three-container" style="width:100%; max-width: 85vw; min-height:650px; display:flex; flex-direction: column; border: 1px solid #ccc;">
    
    <div class="resize-handle" id="three-viewer-resize-handle" style="display: none; /* other styles */"></div>
</div>



@code {
    private bool _isFirstRender = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
       
        if (firstRender)
        {
            _isFirstRender = false; 

           


            await JSRuntime.InvokeVoidAsync("initSTLViewer");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (!_isFirstRender)
        {
          
            try
            {
                await JSRuntime.InvokeVoidAsync("cleanupThreeJsViewer");
            }
            catch (JSException ex)
            {
                
                Console.WriteLine($"Error during Three.js viewer cleanup: {ex.Message}");
            }
        }
    }
}
